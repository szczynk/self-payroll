// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"
	model "self-payrol/model"

	mock "github.com/stretchr/testify/mock"
)

// CompanyRepository is an autogenerated mock type for the CompanyRepository type
type CompanyRepository struct {
	mock.Mock
}

// AddBalance provides a mock function with given fields: ctx, balance
func (_m *CompanyRepository) AddBalance(ctx context.Context, balance int) (*model.Company, error) {
	ret := _m.Called(ctx, balance)

	var r0 *model.Company
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*model.Company, error)); ok {
		return rf(ctx, balance)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *model.Company); ok {
		r0 = rf(ctx, balance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Company)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, balance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrUpdate provides a mock function with given fields: ctx, Company
func (_m *CompanyRepository) CreateOrUpdate(ctx context.Context, Company *model.Company) (*model.Company, error) {
	ret := _m.Called(ctx, Company)

	var r0 *model.Company
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Company) (*model.Company, error)); ok {
		return rf(ctx, Company)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Company) *model.Company); ok {
		r0 = rf(ctx, Company)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Company)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Company) error); ok {
		r1 = rf(ctx, Company)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DebitBalance provides a mock function with given fields: ctx, amount, note
func (_m *CompanyRepository) DebitBalance(ctx context.Context, amount int, note string) error {
	ret := _m.Called(ctx, amount, note)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) error); ok {
		r0 = rf(ctx, amount, note)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx
func (_m *CompanyRepository) Get(ctx context.Context) (*model.Company, error) {
	ret := _m.Called(ctx)

	var r0 *model.Company
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*model.Company, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *model.Company); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Company)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCompanyRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCompanyRepository creates a new instance of CompanyRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCompanyRepository(t mockConstructorTestingTNewCompanyRepository) *CompanyRepository {
	mock := &CompanyRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
