// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"
	model "self-payrol/model"

	mock "github.com/stretchr/testify/mock"

	request "self-payrol/request"
)

// CompanyUsecase is an autogenerated mock type for the CompanyUsecase type
type CompanyUsecase struct {
	mock.Mock
}

// CreateOrUpdateCompany provides a mock function with given fields: ctx, req
func (_m *CompanyUsecase) CreateOrUpdateCompany(ctx context.Context, req request.CompanyRequest) (*model.Company, int, error) {
	ret := _m.Called(ctx, req)

	var r0 *model.Company
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, request.CompanyRequest) (*model.Company, int, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.CompanyRequest) *model.Company); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Company)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.CompanyRequest) int); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, request.CompanyRequest) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCompanyInfo provides a mock function with given fields: ctx
func (_m *CompanyUsecase) GetCompanyInfo(ctx context.Context) (*model.Company, int, error) {
	ret := _m.Called(ctx)

	var r0 *model.Company
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) (*model.Company, int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *model.Company); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Company)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) int); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TopupBalance provides a mock function with given fields: ctx, req
func (_m *CompanyUsecase) TopupBalance(ctx context.Context, req request.TopupCompanyBalance) (*model.Company, int, error) {
	ret := _m.Called(ctx, req)

	var r0 *model.Company
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, request.TopupCompanyBalance) (*model.Company, int, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.TopupCompanyBalance) *model.Company); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Company)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.TopupCompanyBalance) int); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, request.TopupCompanyBalance) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewCompanyUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewCompanyUsecase creates a new instance of CompanyUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCompanyUsecase(t mockConstructorTestingTNewCompanyUsecase) *CompanyUsecase {
	mock := &CompanyUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
