// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"
	model "self-payrol/model"

	mock "github.com/stretchr/testify/mock"
)

// PositionRepository is an autogenerated mock type for the PositionRepository type
type PositionRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, Position
func (_m *PositionRepository) Create(ctx context.Context, Position *model.Position) (*model.Position, error) {
	ret := _m.Called(ctx, Position)

	var r0 *model.Position
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Position) (*model.Position, error)); ok {
		return rf(ctx, Position)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Position) *model.Position); ok {
		r0 = rf(ctx, Position)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Position)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Position) error); ok {
		r1 = rf(ctx, Position)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *PositionRepository) Delete(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields: ctx, limit, offset
func (_m *PositionRepository) Fetch(ctx context.Context, limit int, offset int) ([]*model.Position, error) {
	ret := _m.Called(ctx, limit, offset)

	var r0 []*model.Position
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]*model.Position, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*model.Position); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Position)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *PositionRepository) FindByID(ctx context.Context, id int) (*model.Position, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.Position
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*model.Position, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *model.Position); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Position)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateByID provides a mock function with given fields: ctx, id, Position
func (_m *PositionRepository) UpdateByID(ctx context.Context, id int, Position *model.Position) (*model.Position, error) {
	ret := _m.Called(ctx, id, Position)

	var r0 *model.Position
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *model.Position) (*model.Position, error)); ok {
		return rf(ctx, id, Position)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *model.Position) *model.Position); ok {
		r0 = rf(ctx, id, Position)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Position)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *model.Position) error); ok {
		r1 = rf(ctx, id, Position)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPositionRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewPositionRepository creates a new instance of PositionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPositionRepository(t mockConstructorTestingTNewPositionRepository) *PositionRepository {
	mock := &PositionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
