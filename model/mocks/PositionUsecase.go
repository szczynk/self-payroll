// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"
	model "self-payrol/model"

	mock "github.com/stretchr/testify/mock"

	request "self-payrol/request"
)

// PositionUsecase is an autogenerated mock type for the PositionUsecase type
type PositionUsecase struct {
	mock.Mock
}

// DestroyPosition provides a mock function with given fields: ctx, id
func (_m *PositionUsecase) DestroyPosition(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditPosition provides a mock function with given fields: ctx, id, req
func (_m *PositionUsecase) EditPosition(ctx context.Context, id int, req *request.PositionRequest) (*model.Position, error) {
	ret := _m.Called(ctx, id, req)

	var r0 *model.Position
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *request.PositionRequest) (*model.Position, error)); ok {
		return rf(ctx, id, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *request.PositionRequest) *model.Position); ok {
		r0 = rf(ctx, id, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Position)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *request.PositionRequest) error); ok {
		r1 = rf(ctx, id, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchPosition provides a mock function with given fields: ctx, limit, offset
func (_m *PositionUsecase) FetchPosition(ctx context.Context, limit int, offset int) ([]*model.Position, error) {
	ret := _m.Called(ctx, limit, offset)

	var r0 []*model.Position
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]*model.Position, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*model.Position); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Position)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *PositionUsecase) GetByID(ctx context.Context, id int) (*model.Position, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.Position
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*model.Position, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *model.Position); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Position)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StorePosition provides a mock function with given fields: ctx, req
func (_m *PositionUsecase) StorePosition(ctx context.Context, req *request.PositionRequest) (*model.Position, error) {
	ret := _m.Called(ctx, req)

	var r0 *model.Position
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *request.PositionRequest) (*model.Position, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *request.PositionRequest) *model.Position); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Position)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *request.PositionRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPositionUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewPositionUsecase creates a new instance of PositionUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPositionUsecase(t mockConstructorTestingTNewPositionUsecase) *PositionUsecase {
	mock := &PositionUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
